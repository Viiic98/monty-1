#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * token_opcode - reads line and tokenize for opcode an argumen if any.
 * @line: pointer to line with opcodes.
 *
 * Return: pointer to array of pointers with opcode and arguments if any found.
 */
char **token_opcode(char *line)
{
	const char s[7] = " \t\r\n\v\f";
	char **result;

	result = malloc(2 * sizeof(char *));
	if (result == NULL)
		return (NULL);
	result[0] = strtok(line, s);
	result[1] = strtok(NULL, s);

	return (result);
}

/**
 * token_command - Read command_line and return the first command.
 * @command_line: command line string.
 *
 * Return: string with the first command from command_line.
 */
char *token_command(char *line)
{
	int i, j, opcode_size = 0;
	const char delimit[7] = " \t\r\n\v\f";
	char *opcode = NULL;

	for (i = 0; line[i] != '\0'; i++)
	{
		for (j = 0; delimit[j] != '\0'; j++)
		{
			if (line[i] == delimit[j])
				break;
		}
		if (delimit[j] == '\0')
			opcode_size++;
		else
			break;
	}

	opcode = (char *) malloc((opcode_size + 1) * sizeof(char));
	if (opcode == NULL)
		return (NULL);
	for (i = 0; i < opcode_size; i++)
		opcode[i] = line[i];
	opcode[opcode_size] = '\0';
	return (opcode);
}

/**
 * find_opcode - find the first opcode.
 * @l: pointer to string to finde an opcode.
 * @nread: size of character in line, including return key.
 *
 * Return: position in line where the first opcode is, -1 if none opcode found.
 */
int find_opcode(char **l, ssize_t nread)
{
	int n = 0;

	/**
	 * To change return character by null character at the end of the line.
	 */
	(*l)[nread - 1] = '\0';

	/**
	 * To look for the first character not null, not white space and not tab.
	 */
	while (((*l)[n]  != '\0') && (((*l)[n] == ' ') || ((*l)[n] == '\t')))
		n++;

	if ((*l)[n]  == '\0')
		return (-1);
	else
		return (n);
}


/**
 * main - Entry point
 * @argc: number of arguments passed as parameter to main program.
 * @argv: array of strings with the parameters passed to main program
 *
 * Return: EXIT_SUCCESS on success, EXIT_FAILURE on any failure.
 */

int main(int argc, char *argv[])
{
	FILE *stream = NULL;
	char *line = NULL, **opcode = NULL;
	size_t len = 0;
	ssize_t nread = 0;

	if (argc != 2)
	{
		fprintf(stderr, "USAGE: monty file\n");
		exit(EXIT_FAILURE);
	}

	stream = fopen(argv[1], "r");
	if (stream == NULL)
	{
		fprintf(stderr, "Error: Can't open file %s\n", argv[1]);
		exit(EXIT_FAILURE);
	}

	while ((nread = getline(&line, &len, stream)) != -1)
	{
		opcode = token_opcode(line);
		printf("<%s><%s>\n", opcode[0], opcode[1]);
	}

	free(line);
	free(opcode);
	fclose(stream);
	exit(EXIT_SUCCESS);
}

